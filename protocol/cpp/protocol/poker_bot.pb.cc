// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "protocol/poker_bot.pb.h"
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace poker_bot {

namespace {

const ::google::protobuf::Descriptor* Action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Action_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Action_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_Card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_Card_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Event_Card_Suit_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Event_Type_descriptor_ = NULL;

}  // namespace


void protobuf_BuildDesc_protocol_2fpoker_5fbot_2eproto_AssignGlobalDescriptors(const ::google::protobuf::FileDescriptor* file) {
  Action_descriptor_ = file->message_type(0);
  Action::default_instance_ = new Action();
  static const int Action_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, amount_),
  };
  Action_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Action_descriptor_,
      Action::default_instance_,
      Action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(Action));
  Action_Type_descriptor_ = Action_descriptor_->enum_type(0);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Action_descriptor_, Action::default_instance_);
  Event_descriptor_ = file->message_type(1);
  Event::default_instance_ = new Event();
  static const int Event_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, credits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, message_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(Event));
  Event_Card_descriptor_ = Event_descriptor_->nested_type(0);
  Event_Card::default_instance_ = new Event_Card();
  static const int Event_Card_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Card, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Card, suit_),
  };
  Event_Card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_Card_descriptor_,
      Event_Card::default_instance_,
      Event_Card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(Event_Card));
  Event_Card_Suit_descriptor_ = Event_Card_descriptor_->enum_type(0);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_Card_descriptor_, Event_Card::default_instance_);
  Event_Type_descriptor_ = Event_descriptor_->enum_type(0);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, Event::default_instance_);
  Action::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  Event_Card::default_instance_->InitAsDefaultInstance();
}

void protobuf_BuildDesc_protocol_2fpoker_5fbot_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;
  ::google::protobuf::DescriptorPool* pool =
    ::google::protobuf::DescriptorPool::internal_generated_pool();

  pool->InternalBuildGeneratedFile(
    "\n\030protocol/poker_bot.proto\022\tpoker_bot\"y\n"
    "\006Action\022*\n\004type\030\001 \002(\0162\026.poker_bot.Action"
    ".Type:\004FOLD\022\021\n\006amount\030\002 \001(\005:\0010\"0\n\004Type\022\010"
    "\n\004FOLD\020\000\022\010\n\004CALL\020\001\022\t\n\005RAISE\020\002\022\t\n\005CHECK\020\003"
    "\"\277\004\n\005Event\022#\n\004type\030\001 \002(\0162\025.poker_bot.Eve"
    "nt.Type\022\021\n\tplayer_id\030\002 \001(\r\022\017\n\007credits\030\003 "
    "\001(\r\022\016\n\006amount\030\004 \001(\005\022$\n\005cards\030\005 \003(\0132\025.pok"
    "er_bot.Event.Card\022#\n\004card\030\006 \001(\0132\025.poker_"
    "bot.Event.Card\022!\n\006action\030\007 \001(\0132\021.poker_b"
    "ot.Action\022\014\n\004rank\030\010 \001(\r\022\017\n\007message\030\n \001(\t"
    "\032x\n\004Card\022\r\n\005value\030\001 \002(\005\022(\n\004suit\030\002 \002(\0162\032."
    "poker_bot.Event.Card.Suit\"7\n\004Suit\022\014\n\010DIA"
    "MONDS\020\000\022\n\n\006SPADES\020\001\022\n\n\006HEARTS\020\002\022\t\n\005CLUBS"
    "\020\003\"\325\001\n\004Type\022\010\n\004JOIN\020\000\022\r\n\tNEW_ROUND\020\001\022\n\n\006"
    "BUTTON\020\002\022\r\n\tBIG_BLIND\020\003\022\017\n\013SMALL_BLIND\020\004"
    "\022\010\n\004DEAL\020\005\022\010\n\004FLOP\020\006\022\010\n\004TURN\020\007\022\t\n\005RIVER\020"
    "\010\022\n\n\006ACTION\020\t\022\022\n\016ADJUST_CREDITS\020\n\022\007\n\003WIN"
    "\020\013\022\020\n\014END_OF_ROUND\020\014\022\010\n\004QUIT\020\r\022\013\n\007BAD_BO"
    "T\020\016\022\r\n\tYOUR_TURN\020\017", 738,
  &protobuf_BuildDesc_protocol_2fpoker_5fbot_2eproto_AssignGlobalDescriptors);
}

// Force BuildDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2fpoker_5fbot_2eproto {
  StaticDescriptorInitializer_protocol_2fpoker_5fbot_2eproto() {
    protobuf_BuildDesc_protocol_2fpoker_5fbot_2eproto();
  }
} static_descriptor_initializer_protocol_2fpoker_5fbot_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Action_Type_descriptor() {
  if (Action_Type_descriptor_ == NULL) protobuf_BuildDesc_protocol_2fpoker_5fbot_2eproto();
  return Action_Type_descriptor_;
}
bool Action_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Action_Type Action::FOLD;
const Action_Type Action::CALL;
const Action_Type Action::RAISE;
const Action_Type Action::CHECK;
const Action_Type Action::Type_MIN;
const Action_Type Action::Type_MAX;
#endif  // _MSC_VER


Action::Action()
  : ::google::protobuf::Message(),
    _cached_size_(0),
    type_(0),
    amount_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void Action::InitAsDefaultInstance() {}

Action::Action(const Action& from)
  : ::google::protobuf::Message(),
    _cached_size_(0),
    type_(0),
    amount_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

Action::~Action() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Action::descriptor() {
  if (Action_descriptor_ == NULL) protobuf_BuildDesc_protocol_2fpoker_5fbot_2eproto();
  return Action_descriptor_;
}

const Action& Action::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_protocol_2fpoker_5fbot_2eproto();
  return *default_instance_;
}

Action* Action::default_instance_ = NULL;

Action* Action::New() const {
  return new Action;
}

const ::google::protobuf::Descriptor* Action::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Action::GetReflection() const {
  if (Action_reflection_ == NULL) protobuf_BuildDesc_protocol_2fpoker_5fbot_2eproto();
  return Action_reflection_;
}

// ===================================================================

const ::google::protobuf::EnumDescriptor* Event_Type_descriptor() {
  if (Event_Type_descriptor_ == NULL) protobuf_BuildDesc_protocol_2fpoker_5fbot_2eproto();
  return Event_Type_descriptor_;
}
bool Event_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Event_Type Event::JOIN;
const Event_Type Event::NEW_ROUND;
const Event_Type Event::BUTTON;
const Event_Type Event::BIG_BLIND;
const Event_Type Event::SMALL_BLIND;
const Event_Type Event::DEAL;
const Event_Type Event::FLOP;
const Event_Type Event::TURN;
const Event_Type Event::RIVER;
const Event_Type Event::ACTION;
const Event_Type Event::ADJUST_CREDITS;
const Event_Type Event::WIN;
const Event_Type Event::END_OF_ROUND;
const Event_Type Event::QUIT;
const Event_Type Event::BAD_BOT;
const Event_Type Event::YOUR_TURN;
const Event_Type Event::Type_MIN;
const Event_Type Event::Type_MAX;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Event_Card_Suit_descriptor() {
  if (Event_Card_Suit_descriptor_ == NULL) protobuf_BuildDesc_protocol_2fpoker_5fbot_2eproto();
  return Event_Card_Suit_descriptor_;
}
bool Event_Card_Suit_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Event_Card_Suit Event_Card::DIAMONDS;
const Event_Card_Suit Event_Card::SPADES;
const Event_Card_Suit Event_Card::HEARTS;
const Event_Card_Suit Event_Card::CLUBS;
const Event_Card_Suit Event_Card::Suit_MIN;
const Event_Card_Suit Event_Card::Suit_MAX;
#endif  // _MSC_VER


Event_Card::Event_Card()
  : ::google::protobuf::Message(),
    _cached_size_(0),
    value_(0),
    suit_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void Event_Card::InitAsDefaultInstance() {}

Event_Card::Event_Card(const Event_Card& from)
  : ::google::protobuf::Message(),
    _cached_size_(0),
    value_(0),
    suit_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

Event_Card::~Event_Card() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Event_Card::descriptor() {
  if (Event_Card_descriptor_ == NULL) protobuf_BuildDesc_protocol_2fpoker_5fbot_2eproto();
  return Event_Card_descriptor_;
}

const Event_Card& Event_Card::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_protocol_2fpoker_5fbot_2eproto();
  return *default_instance_;
}

Event_Card* Event_Card::default_instance_ = NULL;

Event_Card* Event_Card::New() const {
  return new Event_Card;
}

const ::google::protobuf::Descriptor* Event_Card::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Event_Card::GetReflection() const {
  if (Event_Card_reflection_ == NULL) protobuf_BuildDesc_protocol_2fpoker_5fbot_2eproto();
  return Event_Card_reflection_;
}

// -------------------------------------------------------------------









const ::std::string Event::_default_message_;
Event::Event()
  : ::google::protobuf::Message(),
    _cached_size_(0),
    type_(0),
    player_id_(0u),
    credits_(0u),
    amount_(0),
    card_(NULL),
    action_(NULL),
    rank_(0u),
    message_(const_cast< ::std::string*>(&_default_message_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void Event::InitAsDefaultInstance() {  card_ = const_cast< ::poker_bot::Event_Card*>(&::poker_bot::Event_Card::default_instance());
  action_ = const_cast< ::poker_bot::Action*>(&::poker_bot::Action::default_instance());
}

Event::Event(const Event& from)
  : ::google::protobuf::Message(),
    _cached_size_(0),
    type_(0),
    player_id_(0u),
    credits_(0u),
    amount_(0),
    card_(NULL),
    action_(NULL),
    rank_(0u),
    message_(const_cast< ::std::string*>(&_default_message_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

Event::~Event() {
  if (message_ != &_default_message_) {
    delete message_;
  }
  if (this != default_instance_) {
    delete card_;
    delete action_;
  }
}

const ::google::protobuf::Descriptor* Event::descriptor() {
  if (Event_descriptor_ == NULL) protobuf_BuildDesc_protocol_2fpoker_5fbot_2eproto();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_protocol_2fpoker_5fbot_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

const ::google::protobuf::Descriptor* Event::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Event::GetReflection() const {
  if (Event_reflection_ == NULL) protobuf_BuildDesc_protocol_2fpoker_5fbot_2eproto();
  return Event_reflection_;
}

}  // namespace poker_bot
