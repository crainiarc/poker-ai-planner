// Generated by the protocol buffer compiler.  DO NOT EDIT!

package poker_bot;

public final class PokerBot {
  private PokerBot() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class Action extends
      com.google.protobuf.GeneratedMessage {
    // Use Action.newBuilder() to construct.
    private Action() {}
    
    private static final Action defaultInstance = new Action();
    public static Action getDefaultInstance() {
      return defaultInstance;
    }
    
    public Action getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return poker_bot.PokerBot.internal_static_poker_bot_Action_descriptor;
    }
    
    @Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return poker_bot.PokerBot.internal_static_poker_bot_Action_fieldAccessorTable;
    }
    
    public static enum Type {
      FOLD(0, 0),
      CALL(1, 1),
      RAISE(2, 2),
      CHECK(3, 3),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static Type valueOf(int value) {
        switch (value) {
          case 0: return FOLD;
          case 1: return CALL;
          case 2: return RAISE;
          case 3: return CHECK;
          default: return null;
        }
      }
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return poker_bot.PokerBot.Action.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final Type[] VALUES = {
        FOLD, CALL, RAISE, CHECK, 
      };
      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      private final int index;
      private final int value;
      private Type(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      static {
        poker_bot.PokerBot.getDescriptor();
      }
    }
    
    // required .poker_bot.Action.Type type = 1 [default = FOLD];
    private boolean hasType;
    private poker_bot.PokerBot.Action.Type type_ = poker_bot.PokerBot.Action.Type.FOLD;
    public boolean hasType() { return hasType; }
    public poker_bot.PokerBot.Action.Type getType() { return type_; }
    
    // optional int32 amount = 2 [default = 0];
    private boolean hasAmount;
    private int amount_ = 0;
    public boolean hasAmount() { return hasAmount; }
    public int getAmount() { return amount_; }
    
    public static poker_bot.PokerBot.Action parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static poker_bot.PokerBot.Action parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static poker_bot.PokerBot.Action parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static poker_bot.PokerBot.Action parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static poker_bot.PokerBot.Action parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static poker_bot.PokerBot.Action parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static poker_bot.PokerBot.Action parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static poker_bot.PokerBot.Action parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return new Builder(); }
    public Builder newBuilderForType() { return new Builder(); }
    public static Builder newBuilder(poker_bot.PokerBot.Action prototype) {
      return new Builder().mergeFrom(prototype);
    }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      // Construct using poker_bot.PokerBot.Action.newBuilder()
      private Builder() {}
      
      poker_bot.PokerBot.Action result = new poker_bot.PokerBot.Action();
      
      @Override
      protected poker_bot.PokerBot.Action internalGetResult() {
        return result;
      }
      
      @Override
      public Builder clear() {
        result = new poker_bot.PokerBot.Action();
        return this;
      }
      
      @Override
      public Builder clone() {
        return new Builder().mergeFrom(result);
      }
      
      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return poker_bot.PokerBot.Action.getDescriptor();
      }
      
      public poker_bot.PokerBot.Action getDefaultInstanceForType() {
        return poker_bot.PokerBot.Action.getDefaultInstance();
      }
      
      public poker_bot.PokerBot.Action build() {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result);
        }
        return buildPartial();
      }
      
      private poker_bot.PokerBot.Action buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public poker_bot.PokerBot.Action buildPartial() {
        poker_bot.PokerBot.Action returnMe = result;
        result = null;
        return returnMe;
      }
      
      
      // required .poker_bot.Action.Type type = 1 [default = FOLD];
      public boolean hasType() {
        return result.hasType();
      }
      public poker_bot.PokerBot.Action.Type getType() {
        return result.getType();
      }
      public Builder setType(poker_bot.PokerBot.Action.Type value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder clearType() {
        result.hasType = false;
        result.type_ = poker_bot.PokerBot.Action.Type.FOLD;
        return this;
      }
      
      // optional int32 amount = 2 [default = 0];
      public boolean hasAmount() {
        return result.hasAmount();
      }
      public int getAmount() {
        return result.getAmount();
      }
      public Builder setAmount(int value) {
        result.hasAmount = true;
        result.amount_ = value;
        return this;
      }
      public Builder clearAmount() {
        result.hasAmount = false;
        result.amount_ = 0;
        return this;
      }
    }
    
    static {
      poker_bot.PokerBot.getDescriptor();
    }
  }
  
  public static final class Event extends
      com.google.protobuf.GeneratedMessage {
    // Use Event.newBuilder() to construct.
    private Event() {}
    
    private static final Event defaultInstance = new Event();
    public static Event getDefaultInstance() {
      return defaultInstance;
    }
    
    public Event getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return poker_bot.PokerBot.internal_static_poker_bot_Event_descriptor;
    }
    
    @Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return poker_bot.PokerBot.internal_static_poker_bot_Event_fieldAccessorTable;
    }
    
    public static enum Type {
      JOIN(0, 0),
      NEW_ROUND(1, 1),
      BUTTON(2, 2),
      BIG_BLIND(3, 3),
      SMALL_BLIND(4, 4),
      DEAL(5, 5),
      FLOP(6, 6),
      TURN(7, 7),
      RIVER(8, 8),
      ACTION(9, 9),
      ADJUST_CREDITS(10, 10),
      WIN(11, 11),
      END_OF_ROUND(12, 12),
      QUIT(13, 13),
      BAD_BOT(14, 14),
      YOUR_TURN(15, 15),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static Type valueOf(int value) {
        switch (value) {
          case 0: return JOIN;
          case 1: return NEW_ROUND;
          case 2: return BUTTON;
          case 3: return BIG_BLIND;
          case 4: return SMALL_BLIND;
          case 5: return DEAL;
          case 6: return FLOP;
          case 7: return TURN;
          case 8: return RIVER;
          case 9: return ACTION;
          case 10: return ADJUST_CREDITS;
          case 11: return WIN;
          case 12: return END_OF_ROUND;
          case 13: return QUIT;
          case 14: return BAD_BOT;
          case 15: return YOUR_TURN;
          default: return null;
        }
      }
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return poker_bot.PokerBot.Event.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final Type[] VALUES = {
        JOIN, NEW_ROUND, BUTTON, BIG_BLIND, SMALL_BLIND, DEAL, FLOP, TURN, RIVER, ACTION, ADJUST_CREDITS, WIN, END_OF_ROUND, QUIT, BAD_BOT, YOUR_TURN, 
      };
      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      private final int index;
      private final int value;
      private Type(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      static {
        poker_bot.PokerBot.getDescriptor();
      }
    }
    
    public static final class Card extends
        com.google.protobuf.GeneratedMessage {
      // Use Card.newBuilder() to construct.
      private Card() {}
      
      private static final Card defaultInstance = new Card();
      public static Card getDefaultInstance() {
        return defaultInstance;
      }
      
      public Card getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return poker_bot.PokerBot.internal_static_poker_bot_Event_Card_descriptor;
      }
      
      @Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return poker_bot.PokerBot.internal_static_poker_bot_Event_Card_fieldAccessorTable;
      }
      
      public static enum Suit {
        DIAMONDS(0, 0),
        SPADES(1, 1),
        HEARTS(2, 2),
        CLUBS(3, 3),
        ;
        
        
        public final int getNumber() { return value; }
        
        public static Suit valueOf(int value) {
          switch (value) {
            case 0: return DIAMONDS;
            case 1: return SPADES;
            case 2: return HEARTS;
            case 3: return CLUBS;
            default: return null;
          }
        }
        
        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(index);
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return poker_bot.PokerBot.Event.Card.getDescriptor().getEnumTypes().get(0);
        }
        
        private static final Suit[] VALUES = {
          DIAMONDS, SPADES, HEARTS, CLUBS, 
        };
        public static Suit valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }
        private final int index;
        private final int value;
        private Suit(int index, int value) {
          this.index = index;
          this.value = value;
        }
        
        static {
          poker_bot.PokerBot.getDescriptor();
        }
      }
      
      // required int32 value = 1;
      private boolean hasValue;
      private int value_ = 0;
      public boolean hasValue() { return hasValue; }
      public int getValue() { return value_; }
      
      // required .poker_bot.Event.Card.Suit suit = 2;
      private boolean hasSuit;
      private poker_bot.PokerBot.Event.Card.Suit suit_ = poker_bot.PokerBot.Event.Card.Suit.DIAMONDS;
      public boolean hasSuit() { return hasSuit; }
      public poker_bot.PokerBot.Event.Card.Suit getSuit() { return suit_; }
      
      public static poker_bot.PokerBot.Event.Card parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static poker_bot.PokerBot.Event.Card parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistry extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static poker_bot.PokerBot.Event.Card parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static poker_bot.PokerBot.Event.Card parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistry extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static poker_bot.PokerBot.Event.Card parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static poker_bot.PokerBot.Event.Card parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistry extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static poker_bot.PokerBot.Event.Card parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static poker_bot.PokerBot.Event.Card parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistry extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return new Builder(); }
      public Builder newBuilderForType() { return new Builder(); }
      public static Builder newBuilder(poker_bot.PokerBot.Event.Card prototype) {
        return new Builder().mergeFrom(prototype);
      }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        // Construct using poker_bot.PokerBot.Event.Card.newBuilder()
        private Builder() {}
        
        poker_bot.PokerBot.Event.Card result = new poker_bot.PokerBot.Event.Card();
        
        @Override
        protected poker_bot.PokerBot.Event.Card internalGetResult() {
          return result;
        }
        
        @Override
        public Builder clear() {
          result = new poker_bot.PokerBot.Event.Card();
          return this;
        }
        
        @Override
        public Builder clone() {
          return new Builder().mergeFrom(result);
        }
        
        @Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return poker_bot.PokerBot.Event.Card.getDescriptor();
        }
        
        public poker_bot.PokerBot.Event.Card getDefaultInstanceForType() {
          return poker_bot.PokerBot.Event.Card.getDefaultInstance();
        }
        
        public poker_bot.PokerBot.Event.Card build() {
          if (!isInitialized()) {
            throw new com.google.protobuf.UninitializedMessageException(
              result);
          }
          return buildPartial();
        }
        
        private poker_bot.PokerBot.Event.Card buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw new com.google.protobuf.UninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public poker_bot.PokerBot.Event.Card buildPartial() {
          poker_bot.PokerBot.Event.Card returnMe = result;
          result = null;
          return returnMe;
        }
        
        
        // required int32 value = 1;
        public boolean hasValue() {
          return result.hasValue();
        }
        public int getValue() {
          return result.getValue();
        }
        public Builder setValue(int value) {
          result.hasValue = true;
          result.value_ = value;
          return this;
        }
        public Builder clearValue() {
          result.hasValue = false;
          result.value_ = 0;
          return this;
        }
        
        // required .poker_bot.Event.Card.Suit suit = 2;
        public boolean hasSuit() {
          return result.hasSuit();
        }
        public poker_bot.PokerBot.Event.Card.Suit getSuit() {
          return result.getSuit();
        }
        public Builder setSuit(poker_bot.PokerBot.Event.Card.Suit value) {
          result.hasSuit = true;
          result.suit_ = value;
          return this;
        }
        public Builder clearSuit() {
          result.hasSuit = false;
          result.suit_ = poker_bot.PokerBot.Event.Card.Suit.DIAMONDS;
          return this;
        }
      }
      
      static {
        poker_bot.PokerBot.getDescriptor();
      }
    }
    
    // required .poker_bot.Event.Type type = 1;
    private boolean hasType;
    private poker_bot.PokerBot.Event.Type type_ = poker_bot.PokerBot.Event.Type.JOIN;
    public boolean hasType() { return hasType; }
    public poker_bot.PokerBot.Event.Type getType() { return type_; }
    
    // optional uint32 player_id = 2;
    private boolean hasPlayerId;
    private int playerId_ = 0;
    public boolean hasPlayerId() { return hasPlayerId; }
    public int getPlayerId() { return playerId_; }
    
    // optional uint32 credits = 3;
    private boolean hasCredits;
    private int credits_ = 0;
    public boolean hasCredits() { return hasCredits; }
    public int getCredits() { return credits_; }
    
    // optional int32 amount = 4;
    private boolean hasAmount;
    private int amount_ = 0;
    public boolean hasAmount() { return hasAmount; }
    public int getAmount() { return amount_; }
    
    // repeated .poker_bot.Event.Card cards = 5;
    private java.util.List<poker_bot.PokerBot.Event.Card> cards_ =
      java.util.Collections.emptyList();
    public java.util.List<poker_bot.PokerBot.Event.Card> getCardsList() {
      return cards_;
    }
    public int getCardsCount() { return cards_.size(); }
    public poker_bot.PokerBot.Event.Card getCards(int index) {
      return cards_.get(index);
    }
    
    // optional .poker_bot.Event.Card card = 6;
    private boolean hasCard;
    private poker_bot.PokerBot.Event.Card card_ = poker_bot.PokerBot.Event.Card.getDefaultInstance();
    public boolean hasCard() { return hasCard; }
    public poker_bot.PokerBot.Event.Card getCard() { return card_; }
    
    // optional .poker_bot.Action action = 7;
    private boolean hasAction;
    private poker_bot.PokerBot.Action action_ = poker_bot.PokerBot.Action.getDefaultInstance();
    public boolean hasAction() { return hasAction; }
    public poker_bot.PokerBot.Action getAction() { return action_; }
    
    // optional uint32 rank = 8;
    private boolean hasRank;
    private int rank_ = 0;
    public boolean hasRank() { return hasRank; }
    public int getRank() { return rank_; }
    
    // optional string message = 10;
    private boolean hasMessage;
    private java.lang.String message_ = "";
    public boolean hasMessage() { return hasMessage; }
    public java.lang.String getMessage() { return message_; }
    
    public static poker_bot.PokerBot.Event parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static poker_bot.PokerBot.Event parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static poker_bot.PokerBot.Event parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static poker_bot.PokerBot.Event parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static poker_bot.PokerBot.Event parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static poker_bot.PokerBot.Event parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static poker_bot.PokerBot.Event parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static poker_bot.PokerBot.Event parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return new Builder(); }
    public Builder newBuilderForType() { return new Builder(); }
    public static Builder newBuilder(poker_bot.PokerBot.Event prototype) {
      return new Builder().mergeFrom(prototype);
    }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      // Construct using poker_bot.PokerBot.Event.newBuilder()
      private Builder() {}
      
      poker_bot.PokerBot.Event result = new poker_bot.PokerBot.Event();
      
      @Override
      protected poker_bot.PokerBot.Event internalGetResult() {
        return result;
      }
      
      @Override
      public Builder clear() {
        result = new poker_bot.PokerBot.Event();
        return this;
      }
      
      @Override
      public Builder clone() {
        return new Builder().mergeFrom(result);
      }
      
      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return poker_bot.PokerBot.Event.getDescriptor();
      }
      
      public poker_bot.PokerBot.Event getDefaultInstanceForType() {
        return poker_bot.PokerBot.Event.getDefaultInstance();
      }
      
      public poker_bot.PokerBot.Event build() {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result);
        }
        return buildPartial();
      }
      
      private poker_bot.PokerBot.Event buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public poker_bot.PokerBot.Event buildPartial() {
        if (result.cards_ != java.util.Collections.EMPTY_LIST) {
          result.cards_ =
            java.util.Collections.unmodifiableList(result.cards_);
        }
        poker_bot.PokerBot.Event returnMe = result;
        result = null;
        return returnMe;
      }
      
      
      // required .poker_bot.Event.Type type = 1;
      public boolean hasType() {
        return result.hasType();
      }
      public poker_bot.PokerBot.Event.Type getType() {
        return result.getType();
      }
      public Builder setType(poker_bot.PokerBot.Event.Type value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder clearType() {
        result.hasType = false;
        result.type_ = poker_bot.PokerBot.Event.Type.JOIN;
        return this;
      }
      
      // optional uint32 player_id = 2;
      public boolean hasPlayerId() {
        return result.hasPlayerId();
      }
      public int getPlayerId() {
        return result.getPlayerId();
      }
      public Builder setPlayerId(int value) {
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder clearPlayerId() {
        result.hasPlayerId = false;
        result.playerId_ = 0;
        return this;
      }
      
      // optional uint32 credits = 3;
      public boolean hasCredits() {
        return result.hasCredits();
      }
      public int getCredits() {
        return result.getCredits();
      }
      public Builder setCredits(int value) {
        result.hasCredits = true;
        result.credits_ = value;
        return this;
      }
      public Builder clearCredits() {
        result.hasCredits = false;
        result.credits_ = 0;
        return this;
      }
      
      // optional int32 amount = 4;
      public boolean hasAmount() {
        return result.hasAmount();
      }
      public int getAmount() {
        return result.getAmount();
      }
      public Builder setAmount(int value) {
        result.hasAmount = true;
        result.amount_ = value;
        return this;
      }
      public Builder clearAmount() {
        result.hasAmount = false;
        result.amount_ = 0;
        return this;
      }
      
      // repeated .poker_bot.Event.Card cards = 5;
      public java.util.List<poker_bot.PokerBot.Event.Card> getCardsList() {
        return java.util.Collections.unmodifiableList(result.cards_);
      }
      public int getCardsCount() {
        return result.getCardsCount();
      }
      public poker_bot.PokerBot.Event.Card getCards(int index) {
        return result.getCards(index);
      }
      public Builder setCards(int index, poker_bot.PokerBot.Event.Card value) {
        result.cards_.set(index, value);
        return this;
      }
      public Builder setCards(int index, poker_bot.PokerBot.Event.Card.Builder builderForValue) {
        result.cards_.set(index, builderForValue.build());
        return this;
      }
      public Builder addCards(poker_bot.PokerBot.Event.Card value) {
        if (result.cards_.isEmpty()) {
          result.cards_ = new java.util.ArrayList<poker_bot.PokerBot.Event.Card>();
        }
        result.cards_.add(value);
        return this;
      }
      public Builder addCards(poker_bot.PokerBot.Event.Card.Builder builderForValue) {
        if (result.cards_.isEmpty()) {
          result.cards_ = new java.util.ArrayList<poker_bot.PokerBot.Event.Card>();
        }
        result.cards_.add(builderForValue.build());
        return this;
      }
      public Builder addAllCards(
          java.lang.Iterable<? extends poker_bot.PokerBot.Event.Card> values) {
        if (result.cards_.isEmpty()) {
          result.cards_ = new java.util.ArrayList<poker_bot.PokerBot.Event.Card>();
        }
        super.addAll(values, result.cards_);
        return this;
      }
      public Builder clearCards() {
        result.cards_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional .poker_bot.Event.Card card = 6;
      public boolean hasCard() {
        return result.hasCard();
      }
      public poker_bot.PokerBot.Event.Card getCard() {
        return result.getCard();
      }
      public Builder setCard(poker_bot.PokerBot.Event.Card value) {
        result.hasCard = true;
        result.card_ = value;
        return this;
      }
      public Builder setCard(poker_bot.PokerBot.Event.Card.Builder builderForValue) {
        result.hasCard = true;
        result.card_ = builderForValue.build();
        return this;
      }
      public Builder mergeCard(poker_bot.PokerBot.Event.Card value) {
        if (result.hasCard() &&
            result.card_ != poker_bot.PokerBot.Event.Card.getDefaultInstance()) {
          result.card_ =
            poker_bot.PokerBot.Event.Card.newBuilder(result.card_).mergeFrom(value).buildPartial();
        } else {
          result.card_ = value;
        }
        result.hasCard = true;
        return this;
      }
      public Builder clearCard() {
        result.hasCard = false;
        result.card_ = poker_bot.PokerBot.Event.Card.getDefaultInstance();
        return this;
      }
      
      // optional .poker_bot.Action action = 7;
      public boolean hasAction() {
        return result.hasAction();
      }
      public poker_bot.PokerBot.Action getAction() {
        return result.getAction();
      }
      public Builder setAction(poker_bot.PokerBot.Action value) {
        result.hasAction = true;
        result.action_ = value;
        return this;
      }
      public Builder setAction(poker_bot.PokerBot.Action.Builder builderForValue) {
        result.hasAction = true;
        result.action_ = builderForValue.build();
        return this;
      }
      public Builder mergeAction(poker_bot.PokerBot.Action value) {
        if (result.hasAction() &&
            result.action_ != poker_bot.PokerBot.Action.getDefaultInstance()) {
          result.action_ =
            poker_bot.PokerBot.Action.newBuilder(result.action_).mergeFrom(value).buildPartial();
        } else {
          result.action_ = value;
        }
        result.hasAction = true;
        return this;
      }
      public Builder clearAction() {
        result.hasAction = false;
        result.action_ = poker_bot.PokerBot.Action.getDefaultInstance();
        return this;
      }
      
      // optional uint32 rank = 8;
      public boolean hasRank() {
        return result.hasRank();
      }
      public int getRank() {
        return result.getRank();
      }
      public Builder setRank(int value) {
        result.hasRank = true;
        result.rank_ = value;
        return this;
      }
      public Builder clearRank() {
        result.hasRank = false;
        result.rank_ = 0;
        return this;
      }
      
      // optional string message = 10;
      public boolean hasMessage() {
        return result.hasMessage();
      }
      public java.lang.String getMessage() {
        return result.getMessage();
      }
      public Builder setMessage(java.lang.String value) {
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder clearMessage() {
        result.hasMessage = false;
        result.message_ = "";
        return this;
      }
    }
    
    static {
      poker_bot.PokerBot.getDescriptor();
    }
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_poker_bot_Action_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_poker_bot_Action_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_poker_bot_Event_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_poker_bot_Event_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_poker_bot_Event_Card_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_poker_bot_Event_Card_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String descriptorData =
      "\n\030protocol/poker_bot.proto\022\tpoker_bot\"y\n" +
      "\006Action\022*\n\004type\030\001 \002(\0162\026.poker_bot.Action" +
      ".Type:\004FOLD\022\021\n\006amount\030\002 \001(\005:\0010\"0\n\004Type\022\010" +
      "\n\004FOLD\020\000\022\010\n\004CALL\020\001\022\t\n\005RAISE\020\002\022\t\n\005CHECK\020\003" +
      "\"\277\004\n\005Event\022#\n\004type\030\001 \002(\0162\025.poker_bot.Eve" +
      "nt.Type\022\021\n\tplayer_id\030\002 \001(\r\022\017\n\007credits\030\003 " +
      "\001(\r\022\016\n\006amount\030\004 \001(\005\022$\n\005cards\030\005 \003(\0132\025.pok" +
      "er_bot.Event.Card\022#\n\004card\030\006 \001(\0132\025.poker_" +
      "bot.Event.Card\022!\n\006action\030\007 \001(\0132\021.poker_b" +
      "ot.Action\022\014\n\004rank\030\010 \001(\r\022\017\n\007message\030\n \001(\t" +
      "\032x\n\004Card\022\r\n\005value\030\001 \002(\005\022(\n\004suit\030\002 \002(\0162\032." +
      "poker_bot.Event.Card.Suit\"7\n\004Suit\022\014\n\010DIA" +
      "MONDS\020\000\022\n\n\006SPADES\020\001\022\n\n\006HEARTS\020\002\022\t\n\005CLUBS" +
      "\020\003\"\325\001\n\004Type\022\010\n\004JOIN\020\000\022\r\n\tNEW_ROUND\020\001\022\n\n\006" +
      "BUTTON\020\002\022\r\n\tBIG_BLIND\020\003\022\017\n\013SMALL_BLIND\020\004" +
      "\022\010\n\004DEAL\020\005\022\010\n\004FLOP\020\006\022\010\n\004TURN\020\007\022\t\n\005RIVER\020" +
      "\010\022\n\n\006ACTION\020\t\022\022\n\016ADJUST_CREDITS\020\n\022\007\n\003WIN" +
      "\020\013\022\020\n\014END_OF_ROUND\020\014\022\010\n\004QUIT\020\r\022\013\n\007BAD_BO" +
      "T\020\016\022\r\n\tYOUR_TURN\020\017";
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_poker_bot_Action_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_poker_bot_Action_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_poker_bot_Action_descriptor,
              new java.lang.String[] { "Type", "Amount", },
              poker_bot.PokerBot.Action.class,
              poker_bot.PokerBot.Action.Builder.class);
          internal_static_poker_bot_Event_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_poker_bot_Event_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_poker_bot_Event_descriptor,
              new java.lang.String[] { "Type", "PlayerId", "Credits", "Amount", "Cards", "Card", "Action", "Rank", "Message", },
              poker_bot.PokerBot.Event.class,
              poker_bot.PokerBot.Event.Builder.class);
          internal_static_poker_bot_Event_Card_descriptor =
            internal_static_poker_bot_Event_descriptor.getNestedTypes().get(0);
          internal_static_poker_bot_Event_Card_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_poker_bot_Event_Card_descriptor,
              new java.lang.String[] { "Value", "Suit", },
              poker_bot.PokerBot.Event.Card.class,
              poker_bot.PokerBot.Event.Card.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
}
